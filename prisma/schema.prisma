generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model chef {
  id               String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String     @db.Uuid
  restaurant_id    String     @db.Uuid
  specialty        String     @db.VarChar(255)
  experience_years Int
  date_created     DateTime   @default(now()) @db.Timestamp(6)
  date_updated     DateTime   @default(now()) @db.Timestamp(6)
  created_at       DateTime   @default(now()) @db.Timestamp(6)
  updated_at       DateTime   @default(now()) @db.Timestamp(6)
  restaurant       restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user             user       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model guest {
  id                     String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                String     @db.Uuid
  favorite_cuisine       String?    @db.VarChar(255)
  favorite_restaurant_id String     @db.Uuid
  total_reservations     Int        @default(0)
  date_created           DateTime   @default(now()) @db.Timestamp(6)
  date_updated           DateTime   @default(now()) @db.Timestamp(6)
  created_at             DateTime   @default(now()) @db.Timestamp(6)
  updated_at             DateTime   @default(now()) @db.Timestamp(6)
  restaurant             restaurant @relation(fields: [favorite_restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user                   user       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model menu {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String     @db.VarChar(255)
  description   String?    @db.VarChar(255)
  price         Int
  category      String     @db.VarChar(255)
  restaurant_id String     @db.Uuid
  date_created  DateTime   @default(now()) @db.Timestamp(6)
  date_updated  DateTime   @default(now()) @db.Timestamp(6)
  created_at    DateTime   @default(now()) @db.Timestamp(6)
  updated_at    DateTime   @default(now()) @db.Timestamp(6)
  restaurant    restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model reservation {
  id               String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  guest_name       String     @db.VarChar(255)
  guest_count      Int
  reservation_date DateTime   @db.Timestamp(6)
  reservation_time DateTime   @db.Time(6)
  restaurant_id    String     @db.Uuid
  user_id          String     @db.Uuid
  date_created     DateTime   @default(now()) @db.Timestamp(6)
  date_updated     DateTime   @default(now()) @db.Timestamp(6)
  created_at       DateTime   @default(now()) @db.Timestamp(6)
  updated_at       DateTime   @default(now()) @db.Timestamp(6)
  restaurant       restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user             user       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model restaurant {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description  String?       @db.VarChar(255)
  address      String?       @db.VarChar(255)
  city         String?       @db.VarChar(255)
  state        String?       @db.VarChar(255)
  zip_code     String?       @db.VarChar(255)
  date_created DateTime?     @default(now()) @db.Timestamp(6)
  date_updated DateTime?     @default(now()) @db.Timestamp(6)
  name         String        @db.VarChar(255)
  created_at   DateTime      @default(now()) @db.Timestamp(6)
  updated_at   DateTime      @default(now()) @db.Timestamp(6)
  user_id      String        @db.Uuid
  tenant_id    String        @db.VarChar(255)
  chef         chef[]
  guest        guest[]
  menu         menu[]
  reservation  reservation[]
  user         user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String        @unique @db.VarChar(255)
  firstName   String?       @db.VarChar(255)
  lastName    String?       @db.VarChar(255)
  roq_user_id String        @db.VarChar(255)
  tenant_id   String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  chef        chef[]
  guest       guest[]
  reservation reservation[]
  restaurant  restaurant[]
}
